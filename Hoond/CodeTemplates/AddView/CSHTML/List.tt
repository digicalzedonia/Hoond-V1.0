<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#
MvcTextTemplateHost mvcHost = MvcTemplateHost;
#>
@model PagedList.IPagedList<#= "<" + mvcHost.ViewDataTypeName + ">" #>
@using Hoond.app_GlobalResources;
@using PagedList.Mvc;
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
if(mvcHost.IsPartialView) {
#>
<#
} else if(mvcHost.IsContentPage) {
#>
@{
    ViewBag.Title = "<#= mvcHost.ViewName#>";
<#
if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {
#>
    Layout = "<#= mvcHost.MasterPageFile#>";
<#
}
#>
}
<h2>@Content.titulo_List<#= mvcHost.ViewDataType.Name #></h2>
@if (!String.IsNullOrEmpty(ViewBag.msgError))
{
    @Html.Action("Mensaje", "Comun", new { msgError = ViewBag.msgError })
}
<#
} else {
#>
@{
    Layout = null;
}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= mvcHost.ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<p class="link-txt create">
    @Html.ActionLink(Content.link_Crear, "Create")
</p>
@using (Html.BeginForm("Index", "<#=mvcHost.ViewDataType.Name#>", FormMethod.Get))
{
    //campos = (indicar los campos a realizar busqueda separados por coma)
    //descripcion = (indicar la descripción de los campos separados por coma)
    @Html.Action("Buscar", "Comun", new { Campos = "", Descripcion = "" })
}
@using (Html.BeginForm("DeleteM", "<#=mvcHost.ViewDataType.Name#>", FormMethod.Post))
{
    <input type="submit" value="@Content.submit_EliminarM" id="cmdEliminar" class="delete-table" />
	<table>
		<thead>
		<tr>
			<th>
                <input type="checkbox" id="idH"  />
            </th>
	<#
	List<ModelProperty> properties = GetModelProperties(mvcHost.ViewDataType);
	foreach (ModelProperty property in properties) {
		if (!property.IsPrimaryKey && property.Scaffold) {
        if(property.ValueExpression == "activo" || property.ValueExpression == "Empresa.nombreEmpresa" || property.ValueExpression == "fecha_alta" || property.ValueExpression == "Usuario2.nombreUsuario" || property.ValueExpression == "password" || property.ValueExpression == String.Join("" ,"id", mvcHost.ViewDataType.Name) || property.ValueExpression == "Usuario.nombreUsuario"){
    #>
        @if(ViewBag.isAdmin)
            {
            <th data-hide="phone">
                <div id="@if(ViewBag.sortField == "<#= property.ValueExpression #>") { @ViewBag.Id }">
                    @Html.ActionLink(@Html.DisplayNameFor(model => model.First().<#= property.ValueExpression #>).ToString(), "Index", new { sortField = "<#= property.ValueExpression #>", txtBusqueda = ViewBag.CurrentFilter, cmbPaginado = ViewBag.CurrentPage, cmbCampo = ViewBag.CurrentField })
                </div>
            </th>
            }
    <#
        }
        else
        {
	#>
        <th data-hide="phone">
                <div id="@if(ViewBag.sortField == "<#= property.ValueExpression #>") { @ViewBag.Id }">
                    @Html.ActionLink(@Html.DisplayNameFor(model => model.First().<#= property.ValueExpression #>).ToString(), "Index", new { sortField = "<#= property.ValueExpression #>", txtBusqueda = ViewBag.CurrentFilter, cmbPaginado = ViewBag.CurrentPage, cmbCampo = ViewBag.CurrentField })
                </div>
            </th>		
	<#
            }
		}
	}
	#>
		<th data-hide="phone"></th>
		</tr>
		</thead>
		<tbody>	
	@foreach (var item in Model) {
		<tr>
			<td>
                <input type="checkbox" name="ids" value="@item.id<#=mvcHost.ViewDataType.Name#>" />
            </td>
	<#
	foreach (ModelProperty property in properties) {
		if (!property.IsPrimaryKey && property.Scaffold) {
        if(property.ValueExpression == "activo" || property.ValueExpression == "Empresa.nombreEmpresa" || property.ValueExpression == "fecha_alta" || property.ValueExpression == "Usuario2.nombreUsuario" || property.ValueExpression == "password" || property.ValueExpression == String.Join("" ,"id", mvcHost.ViewDataType.Name) || property.ValueExpression == "Usuario.nombreUsuario"){
	#>
        @if(ViewBag.isAdmin)
            {
		    <td>
				@Html.DisplayFor(modelItem => <#= property.ItemValueExpression #>)
			</td>
            }
    <#
        } 
        else
        {
    #>
        <td>
                @Html.DisplayFor(modelItem => <#= property.ItemValueExpression #>)
            </td>  
	<#
        }
		}
	}
	
	string pkName = GetPrimaryKeyName(mvcHost.ViewDataType);
	if (pkName != null) {
	#>
		<td>
				<div class="buttons">
					<a href="@Url.Action("Edit", new { id=item.<#= pkName #>  })"><div class="Edit"></div></a>
					<a href="@Url.Action("Details", new { id=item.<#= pkName #>  })"><div class="Details"></div></a>
					<a href="@Url.Action("Delete", new { id=item.<#= pkName #>  })"><div class="Delete"></div></a>
				</div>
			</td>
	<#
	} else {
	#>
		<td>
				<div class="buttons">
					<a href="@Url.Action("Edit", new { id=item.id<#=mvcHost.ViewDataType.Name#> })"><div class="edit"></div></a>
					<a href="@Url.Action("Details", new { id=item.id<#=mvcHost.ViewDataType.Name#> })"><div class="details"></div></a>
					<a href="@Url.Action("Delete", new { id=item.id<#=mvcHost.ViewDataType.Name#> })"><div class="delete"></div></a>
				</div>
			</td>
	<#
	}
	#>
	</tr>
	}
		</tbody>
	</table>
}
<div class="paging">
    <span>@Content.msg_Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) @Content.msg_Pageof @Model.PageCount</span>
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, txtBusqueda = ViewBag.CurrentFilter, cmbPaginado = ViewBag.CurrentPage, cmbCampo = ViewBag.CurrentField }))
</div>
<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(mvcHost.IsContentPage) {
#>
<#
} else if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string AssociationName { get; set; }
    public string ValueExpression { get; set; }
    public string ModelValueExpression { get; set; }
    public string ItemValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public bool IsReadOnly { get; set; }
    public bool Scaffold { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ModelValueExpression = "String.Format(\"{0:F}\", " + prop.ModelValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ModelValueExpression = "String.Format(\"{0:g}\", " + prop.ModelValueExpression + ")";
        }
    }

    return results;
}

// Call this to determine if property has scaffolding enabled
bool Scaffold(PropertyInfo property) {
    foreach (object attribute in property.GetCustomAttributes(true)) {
        var scaffoldColumn = attribute as ScaffoldColumnAttribute;
        if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {
            return false;
        }
    }
    return true;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Call this to determine if the property represents a foreign key.
bool IsForeignKey(PropertyInfo property) {
    return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpressionSuffix(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName + "." + propertyModel.DisplayPropertyName : property.Name;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName : property.Name;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {
            string valueExpression = GetValueExpressionSuffix(prop);

            results.Add(new ModelProperty {
                Name = prop.Name,
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsForeignKey = IsForeignKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
                Scaffold = Scaffold(prop)
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

MvcTextTemplateHost MvcTemplateHost {
    get {
        return (MvcTextTemplateHost)Host;
    }
}
#>